{
    "components": {
        "schemas": {
            "AppPortalAccessIn": {
                "properties": {
                    "featureFlags": {
                        "description": "The set of feature flags the created token will have access to.",
                        "example": [],
                        "items": {
                            "example": "cool-new-feature",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "AppPortalAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "AppUsageStatsIn": {
                "properties": {
                    "appIds": {
                        "items": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "since",
                    "until"
                ],
                "type": "object"
            },
            "AppUsageStatsOut": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ApplicationIn": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "minLength": 1,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the application",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ApplicationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "example": "My first application",
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "metadata",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "ApplicationPatch": {
                "properties": {
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ApplicationStats": {
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "messageDestinations": {
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "appId",
                    "messageDestinations"
                ],
                "type": "object"
            },
            "ApplicationTokenExpireIn": {
                "properties": {
                    "expiry": {
                        "description": "How many seconds until the old key is expired.",
                        "example": 60,
                        "format": "int64",
                        "maximum": 259200,
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsData": {
                "properties": {
                    "failureCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "successCount": {
                        "items": {
                            "format": "int",
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AttemptStatisticsResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AttemptStatisticsData"
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "period": {
                        "$ref": "#/components/schemas/StatisticsPeriod"
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "endDate",
                    "period",
                    "startDate"
                ],
                "type": "object"
            },
            "BackgroundTaskData": {
                "type": "object"
            },
            "BackgroundTaskOut": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/BackgroundTaskData"
                    },
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "data",
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "BackgroundTaskStatus": {
                "enum": [
                    "running",
                    "finished",
                    "failed"
                ],
                "type": "string"
            },
            "BackgroundTaskType": {
                "enum": [
                    "endpoint.replay",
                    "endpoint.recover",
                    "application.stats",
                    "message.broadcast"
                ],
                "type": "string"
            },
            "BorderRadiusConfig": {
                "properties": {
                    "button": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "card": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    },
                    "input": {
                        "$ref": "#/components/schemas/BorderRadiusEnum",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BorderRadiusEnum": {
                "enum": [
                    "none",
                    "lg",
                    "md",
                    "sm",
                    "full"
                ],
                "type": "string"
            },
            "CustomColorPalette": {
                "properties": {
                    "backgroundHover": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "backgroundSecondary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "interactiveAccent": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textDanger": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "textPrimary": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomThemeOverride": {
                "properties": {
                    "borderRadius": {
                        "$ref": "#/components/schemas/BorderRadiusConfig",
                        "nullable": true
                    },
                    "fontSize": {
                        "$ref": "#/components/schemas/FontSizeConfig",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "DashboardAccessOut": {
                "properties": {
                    "token": {
                        "example": "appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://app.svix.com/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "url"
                ],
                "type": "object"
            },
            "EndpointCreatedEvent": {
                "description": "Sent when an endpoint is created.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointCreatedEventData"
                    },
                    "type": {
                        "default": "endpoint.created",
                        "enum": [
                            "endpoint.created"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointCreatedEventData": {
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The ep's UID",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDeletedEvent": {
                "description": "Sent when an endpoint is deleted.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDeletedEventData"
                    },
                    "type": {
                        "default": "endpoint.deleted",
                        "enum": [
                            "endpoint.deleted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDeletedEventData": {
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The ep's UID",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EndpointDisabledEvent": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointDisabledEventData"
                    },
                    "type": {
                        "default": "endpoint.disabled",
                        "enum": [
                            "endpoint.disabled"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointDisabledEventData": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures.",
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The ep's UID",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "failSince": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "failSince"
                ],
                "type": "object"
            },
            "EndpointHeadersIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointHeadersOut": {
                "description": "The value of the headers is returned in the `headers` field.\n\nSensitive headers that have been redacted are returned in the sensitive field.",
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    },
                    "sensitive": {
                        "example": [
                            "Authorization"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "required": [
                    "headers",
                    "sensitive"
                ],
                "type": "object"
            },
            "EndpointHeadersPatchIn": {
                "properties": {
                    "headers": {
                        "additionalProperties": {
                            "nullable": true,
                            "type": "string"
                        },
                        "example": {
                            "X-Example": "123",
                            "X-Foobar": "Bar"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "headers"
                ],
                "type": "object"
            },
            "EndpointIn": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all)",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "EndpointMessageOut": {
                "description": "A model containing information on a given message plus additional fields on the last attempt for that message.",
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "payload": {
                        "example": {
                            "email": "test@example.com",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "status",
                    "timestamp"
                ],
                "type": "object"
            },
            "EndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all)",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "metadata",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "EndpointPatch": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "secret": {
                        "description": "The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The ep's UID",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "type": "string"
                    },
                    "version": {
                        "format": "uint16",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "EndpointSecretOut": {
                "properties": {
                    "key": {
                        "description": "The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "EndpointSecretRotateIn": {
                "properties": {
                    "key": {
                        "default": null,
                        "description": "The endpoint's verification secret. If `null` is passed, a secret is automatically generated. Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24.",
                        "example": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
                        "nullable": true,
                        "pattern": "^(whsec_)?[a-zA-Z0-9+/=]{32,100}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EndpointStats": {
                "properties": {
                    "fail": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "pending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "sending": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "success": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "fail",
                    "pending",
                    "sending",
                    "success"
                ],
                "type": "object"
            },
            "EndpointTransformationIn": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointTransformationOut": {
                "properties": {
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "nullable": true,
                        "type": "string"
                    },
                    "enabled": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EndpointTransformationSimulateIn": {
                "properties": {
                    "channels": {
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "code": {
                        "maxLength": 51200,
                        "minLength": 10,
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "type": "object"
                    }
                },
                "required": [
                    "code",
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "EndpointTransformationSimulateOut": {
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/TransformationHttpMethod",
                        "nullable": true
                    },
                    "payload": {
                        "type": "string"
                    },
                    "url": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "payload",
                    "url"
                ],
                "type": "object"
            },
            "EndpointUpdate": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all)",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "description": {
                        "default": "",
                        "example": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "example": 1,
                        "format": "uint16",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "EndpointUpdatedEvent": {
                "description": "Sent when an endpoint is updated.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EndpointUpdatedEventData"
                    },
                    "type": {
                        "default": "endpoint.updated",
                        "enum": [
                            "endpoint.updated"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "EndpointUpdatedEventData": {
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "endpointUid": {
                        "description": "The ep's UID",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId"
                ],
                "type": "object"
            },
            "EnvironmentIn": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeIn"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/SettingsIn",
                        "nullable": true
                    },
                    "version": {
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "version"
                ],
                "type": "object"
            },
            "EnvironmentOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "eventTypes": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/SettingsOut",
                        "nullable": true
                    },
                    "version": {
                        "default": 1,
                        "format": "int",
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "eventTypes"
                ],
                "type": "object"
            },
            "EnvironmentSettingsOut": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EventExampleIn": {
                "properties": {
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType"
                ],
                "type": "object"
            },
            "EventTypeExampleOut": {
                "properties": {
                    "example": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "example": {
                            "data": {
                                "email": "test@example.com",
                                "username": "test_user"
                            },
                            "type": "user.created"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "example"
                ],
                "type": "object"
            },
            "EventTypeIn": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "example": "cool-new-feature",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "EventTypeOut": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "example": "cool-new-feature",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "name": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "EventTypePatch": {
                "properties": {
                    "archived": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "featureFlag": {
                        "example": "cool-new-feature",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EventTypeSchemaIn": {
                "properties": {
                    "schema": {
                        "example": {
                            "description": "An invoice was paid by a user",
                            "properties": {
                                "invoiceId": {
                                    "description": "The invoice id",
                                    "type": "string"
                                },
                                "userId": {
                                    "description": "The user id",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "invoiceId",
                                "userId"
                            ],
                            "title": "Invoice Paid Event",
                            "type": "object"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "schema"
                ],
                "type": "object"
            },
            "EventTypeUpdate": {
                "properties": {
                    "archived": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "A user has signed up",
                        "type": "string"
                    },
                    "featureFlag": {
                        "example": "cool-new-feature",
                        "maxLength": 256,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "schemas": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The schema for the event type for a specific version as a JSON schema.",
                        "example": {
                            "1": {
                                "description": "An invoice was paid by a user",
                                "properties": {
                                    "invoiceId": {
                                        "description": "The invoice id",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "The user id",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "invoiceId",
                                    "userId"
                                ],
                                "title": "Invoice Paid Event",
                                "type": "object"
                            }
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "required": [
                    "description"
                ],
                "type": "object"
            },
            "ExportEnvironmentIn": {
                "type": "object"
            },
            "FontSizeConfig": {
                "properties": {
                    "base": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "detail"
                ],
                "type": "object"
            },
            "HttpErrorOut": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "detail"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "IntegrationIn": {
                "properties": {
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "IntegrationKeyOut": {
                "properties": {
                    "key": {
                        "example": "integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O",
                        "type": "string"
                    }
                },
                "required": [
                    "key"
                ],
                "type": "object"
            },
            "IntegrationOut": {
                "properties": {
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "id": {
                        "description": "The integ's ID",
                        "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ],
                "type": "object"
            },
            "IntegrationUpdate": {
                "properties": {
                    "name": {
                        "example": "Example Integration",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_ApplicationStats_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ApplicationStats"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_BackgroundTaskOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/BackgroundTaskOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_EndpointMessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointMessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_EndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_EventTypeOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/EventTypeOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_IntegrationOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/IntegrationOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_MessageAttemptOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageAttemptOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_MessageEndpointOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageEndpointOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "ListResponse_MessageOut_": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MessageOut"
                        },
                        "type": "array"
                    },
                    "done": {
                        "type": "boolean"
                    },
                    "iterator": {
                        "example": "iterator",
                        "nullable": true,
                        "type": "string"
                    },
                    "prevIterator": {
                        "example": "-iterator",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "done"
                ],
                "type": "object"
            },
            "MessageAttemptEndpointOut": {
                "properties": {
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "id": {
                        "description": "The attempt's ID",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseStatusCode",
                    "status",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEvent": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptExhaustedEventData"
                    },
                    "type": {
                        "default": "message.attempt.exhausted",
                        "enum": [
                            "message.attempt.exhausted"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptExhaustedEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The msg's UID",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptFailedData": {
                "properties": {
                    "id": {
                        "description": "The attempt's ID",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "responseStatusCode": {
                        "format": "int16",
                        "type": "integer"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "responseStatusCode",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEvent": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessageAttemptFailingEventData"
                    },
                    "type": {
                        "default": "message.attempt.failing",
                        "enum": [
                            "message.attempt.failing"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object"
            },
            "MessageAttemptFailingEventData": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted) as a \"message.attempt.exhausted\" type or after it's failed four times as a \"message.attempt.failing\" event.",
                "properties": {
                    "appId": {
                        "description": "The app's ID",
                        "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "appUid": {
                        "description": "The app's UID",
                        "example": "unique-app-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "lastAttempt": {
                        "$ref": "#/components/schemas/MessageAttemptFailedData"
                    },
                    "msgEventId": {
                        "description": "The msg's UID",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "endpointId",
                    "lastAttempt",
                    "msgId"
                ],
                "type": "object"
            },
            "MessageAttemptHeadersOut": {
                "properties": {
                    "sensitive": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "sentHeaders": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sensitive",
                    "sentHeaders"
                ],
                "type": "object"
            },
            "MessageAttemptOut": {
                "properties": {
                    "endpointId": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "id": {
                        "description": "The attempt's ID",
                        "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "msgId": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "response": {
                        "example": "{}",
                        "type": "string"
                    },
                    "responseStatusCode": {
                        "example": 200,
                        "format": "int16",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "triggerType": {
                        "$ref": "#/components/schemas/MessageAttemptTriggerType"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId",
                    "id",
                    "msgId",
                    "response",
                    "responseStatusCode",
                    "status",
                    "timestamp",
                    "triggerType",
                    "url"
                ],
                "type": "object"
            },
            "MessageAttemptTriggerType": {
                "description": "The reason an attempt was made:\n- Scheduled = 0\n- Manual = 1",
                "enum": [
                    0,
                    1
                ],
                "title": "MessageAttemptTriggerType",
                "type": "integer",
                "x-enum-varnames": [
                    "Scheduled",
                    "Manual"
                ]
            },
            "MessageBroadcastIn": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "example": {
                            "email": "test@example.com",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 5,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageBroadcastOut": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "MessageEndpointOut": {
                "properties": {
                    "channels": {
                        "description": "List of message channels this endpoint listens to (omit for all)",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "description": {
                        "description": "An example endpoint name",
                        "type": "string"
                    },
                    "disabled": {
                        "default": false,
                        "example": false,
                        "type": "boolean"
                    },
                    "filterTypes": {
                        "example": [
                            "user.signup",
                            "user.deleted"
                        ],
                        "items": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "id": {
                        "description": "The ep's ID",
                        "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "nextAttempt": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "rateLimit": {
                        "format": "uint16",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/MessageStatus"
                    },
                    "uid": {
                        "description": "Optional unique identifier for the endpoint",
                        "example": "unique-ep-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "url": {
                        "example": "https://example.com/webhook/",
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "example": 1,
                        "format": "int32",
                        "minimum": 1,
                        "type": "integer"
                    }
                },
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "status",
                    "updatedAt",
                    "url",
                    "version"
                ],
                "type": "object"
            },
            "MessageIn": {
                "properties": {
                    "application": {
                        "$ref": "#/components/schemas/ApplicationIn",
                        "nullable": true
                    },
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "payload": {
                        "example": {
                            "email": "test@example.com",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "payloadRetentionPeriod": {
                        "default": 90,
                        "example": 90,
                        "format": "int64",
                        "maximum": 90,
                        "minimum": 5,
                        "type": "integer"
                    }
                },
                "required": [
                    "eventType",
                    "payload"
                ],
                "type": "object"
            },
            "MessageOut": {
                "properties": {
                    "channels": {
                        "description": "List of free-form identifiers that endpoints can filter by",
                        "example": [
                            "project_123",
                            "group_2"
                        ],
                        "items": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "maxItems": 5,
                        "minItems": 1,
                        "nullable": true,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "eventId": {
                        "description": "Optional unique identifier for the message",
                        "example": "unique-msg-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "The event type's name",
                        "example": "user.signup",
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "id": {
                        "description": "The msg's ID",
                        "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "payload": {
                        "example": {
                            "email": "test@example.com",
                            "username": "test_user"
                        },
                        "type": "object"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "eventType",
                    "id",
                    "payload",
                    "timestamp"
                ],
                "type": "object"
            },
            "MessageStatus": {
                "description": "The sending status of the message:\n- Success = 0\n- Pending = 1\n- Fail = 2\n- Sending = 3",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "title": "MessageStatus",
                "type": "integer",
                "x-enum-varnames": [
                    "Success",
                    "Pending",
                    "Fail",
                    "Sending"
                ]
            },
            "OneTimeTokenIn": {
                "properties": {
                    "oneTimeToken": {
                        "type": "string"
                    }
                },
                "required": [
                    "oneTimeToken"
                ],
                "type": "object"
            },
            "OneTimeTokenOut": {
                "properties": {
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "token"
                ],
                "type": "object"
            },
            "Ordering": {
                "description": "Defines the ordering in a listing of results.",
                "enum": [
                    "ascending",
                    "descending"
                ],
                "type": "string"
            },
            "RecoverIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "RecoverOut": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "ReplayIn": {
                "properties": {
                    "since": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "until": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "since"
                ],
                "type": "object"
            },
            "ReplayOut": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BackgroundTaskStatus"
                    },
                    "task": {
                        "$ref": "#/components/schemas/BackgroundTaskType"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "task"
                ],
                "type": "object"
            },
            "SettingsIn": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SettingsOut": {
                "properties": {
                    "colorPaletteDark": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "colorPaletteLight": {
                        "$ref": "#/components/schemas/CustomColorPalette",
                        "nullable": true
                    },
                    "customBaseFontSize": {
                        "format": "int",
                        "nullable": true,
                        "type": "integer"
                    },
                    "customColor": {
                        "format": "color",
                        "nullable": true,
                        "type": "string"
                    },
                    "customFontFamily": {
                        "example": "Open Sans",
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_ ]+$",
                        "type": "string"
                    },
                    "customLogoUrl": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "customThemeOverride": {
                        "$ref": "#/components/schemas/CustomThemeOverride",
                        "nullable": true
                    },
                    "disableEndpointOnFailure": {
                        "default": true,
                        "type": "boolean"
                    },
                    "displayName": {
                        "nullable": true,
                        "type": "string"
                    },
                    "enableChannels": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableIntegrationManagement": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enableTransformations": {
                        "default": false,
                        "type": "boolean"
                    },
                    "enforceHttps": {
                        "default": true,
                        "type": "boolean"
                    },
                    "eventCatalogPublished": {
                        "default": false,
                        "type": "boolean"
                    },
                    "readOnly": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "StatisticsPeriod": {
                "description": "Period length for a statistics data point",
                "enum": [
                    "OneDay",
                    "FiveMinutes"
                ],
                "type": "string"
            },
            "StatusCodeClass": {
                "description": "The different classes of HTTP status codes:\n- CodeNone = 0\n- Code1xx = 100\n- Code2xx = 200\n- Code3xx = 300\n- Code4xx = 400\n- Code5xx = 500",
                "enum": [
                    0,
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                "title": "StatusCodeClass",
                "type": "integer",
                "x-enum-varnames": [
                    "CodeNone",
                    "Code1xx",
                    "Code2xx",
                    "Code3xx",
                    "Code4xx",
                    "Code5xx"
                ]
            },
            "TransformationHttpMethod": {
                "enum": [
                    "POST",
                    "PUT"
                ],
                "type": "string"
            },
            "ValidationError": {
                "description": "Validation errors have their own schema to provide context for invalid requests eg. mismatched types and out of bounds values. There may be any number of these per 422 UNPROCESSABLE ENTITY error.",
                "properties": {
                    "loc": {
                        "description": "The location as a [`Vec`] of [`String`]s -- often in the form `[\"body\", \"field_name\"]`, `[\"query\", \"field_name\"]`, etc. They may, however, be arbitarily deep.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "msg": {
                        "description": "The message accompanying the validation error item.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of error, often \"type_error\" or \"value_error\", but sometimes with more context like as \"value_error.number.not_ge\"",
                        "type": "string"
                    }
                },
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "bearerFormat": null,
                "description": "HTTP Bearer token passed in the `Authorization` header",
                "scheme": "bearer",
                "type": "http"
            }
        }
    },
    "info": {
        "description": "Welcome to the Svix API documentation!\n\nUseful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)\n\n# Introduction\n\nThis is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).\n\n## Main concepts\n\nIn Svix you have four important entities you will be interacting with:\n\n- `messages`: these are the webhooks being sent. They can have contents and a few other properties.\n- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.\n- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).\n- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.\n\n\n## Authentication\n\nGet your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).\n\n<SecurityDefinitions />\n\n\n## Code samples\n\nThe code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).\n\n\n## Idempotency\n\nSvix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.\n\nTo perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.\n\nSvix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.\n\nPlease note that idempotency is only supported for `POST` requests.\n\n\n## Cross-Origin Resource Sharing\n\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n",
        "title": "Svix API",
        "version": "1.4.12",
        "x-logo": {
            "altText": "Svix Logo",
            "url": "https://www.svix.com/static/img/brand-padded.svg"
        }
    },
    "openapi": "3.0.2",
    "paths": {
        "/api/v1/app/": {
            "get": {
                "description": "List of all the organization's applications.",
                "operationId": "v1.application.list",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The app's ID",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Applications",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationOut = await svix.application.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationOut = await svix.application.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_application_out = svix.application.list(None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_application_out = await svix.application.list(None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseApplicationOut, err := svixClient.Application.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseApplicationOut = svix.application.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseApplicationOut listResponseApplicationOut = svix.getApplication().list()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_application_out = svix.application.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_application_out = svix.application().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseApplicationOut = await svix.Application.ListAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new application.",
                "operationId": "v1.application.create",
                "parameters": [
                    {
                        "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                        "in": "query",
                        "name": "get_if_exists",
                        "schema": {
                            "default": false,
                            "description": "Get an existing application, or create a new one if doesn't exist. It's two separate functions in the libs.",
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.create({\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-app-identifier\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.create(ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-app-identifier\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Create(ctx, &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-app-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.create(ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-app-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().create(new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-app-identifier\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.create(Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-app-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().create(ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-app-identifier\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.CreateAsync(new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application create '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-app-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-app-identifier\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/stats/usage/": {
            "get": {
                "description": "Get basic statistics for all applications.",
                "operationId": "get_app_usage_stats_api_v1_app_stats_usage__get",
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "default": 50,
                            "format": "int",
                            "maximum": 250,
                            "nullable": true,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The app's ID",
                            "example": "app_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_ApplicationStats_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Usage Stats",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationStats = await svix.app.stats();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseApplicationStats = await svix.app.stats();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_application_stats = svix.app.stats()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_application_stats = await svix.app.stats()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseApplicationStats, err := svixClient.App.Stats(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseApplicationStats = svix.app.stats()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseApplicationStats listResponseApplicationStats = svix.getApp().stats()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_application_stats = svix.app.stats()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_application_stats = svix.app().stats().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseApplicationStats = await svix.App.StatsAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix app stats "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/stats/usage/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/": {
            "delete": {
                "description": "Delete an application.",
                "operationId": "v1.application.delete",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.application.delete(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.application.delete(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Application.Delete(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getApplication().delete(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.application.delete(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.application().delete(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Application.DeleteAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application delete \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/app/{app_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an application.",
                "operationId": "v1.application.get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.get(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.get(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Get(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().get(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.get(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().get(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.GetAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application get \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an application.",
                "operationId": "patch_application",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Application",
                "tags": [
                    "Application"
                ]
            },
            "put": {
                "description": "Update an application.",
                "operationId": "v1.application.update",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Application",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationOut = await svix.application.update(\"app_id\", {\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_out = svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-app-identifier\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_out = await svix.application.update(\"app_id\", ApplicationIn(\n    name=\"My first application\",\n    rate_limit=None,\n    uid=\"unique-app-identifier\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationOut, err := svixClient.Application.Update(ctx, \"app_id\", &ApplicationIn{\n    Name: \"My first application\",\n    RateLimit: nil,\n    Uid: \"unique-app-identifier\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationOut = svix.application.update(\"app_id\", ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-app-identifier\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationOut applicationOut = svix.getApplication().update(\"app_id\", new ApplicationIn()\n    .name(\"My first application\")\n    .rateLimit(null)\n    .uid(\"unique-app-identifier\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_out = svix.application.update(\"app_id\", Svix::ApplicationIn.new({\n    \"name\": \"My first application\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-app-identifier\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_out = svix.application().update(\"app_id\", ApplicationIn {\n    name: \"My first application\".to_string(),\n    rate_limit: None,\n    uid: Some(\"unique-app-identifier\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationOut = await svix.Application.UpdateAsync(\"app_id\", new ApplicationIn{\n    name: \"My first application\",\n    rateLimit: null,\n    uid: \"unique-app-identifier\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application update \"app_id\" '{\n    \"name\": \"My first application\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-app-identifier\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.svix.com/api/v1/app/{app_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"My first application\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-app-identifier\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/": {
            "get": {
                "description": "List attempts by endpoint id",
                "operationId": "v1.message-attempt.list-by-endpoint",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByEndpoint(ctx, \"app_id\", \"endpoint_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByEndpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByEndpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_endpoint(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_endpoint(\"app_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByEndpointAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-endpoint \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/attempt/msg/{msg_id}/": {
            "get": {
                "description": "List attempts by message id",
                "operationId": "v1.message-attempt.list-by-msg",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "query",
                        "name": "endpoint_id",
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts By Msg",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByMsg(ctx, \"app_id\", \"msg_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByMsg(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByMsg(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_msg(\"app_id\", \"msg_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByMsgAsync(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-msg \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/attempt/msg/{msg_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/": {
            "get": {
                "description": "List the application's endpoints.",
                "operationId": "v1.endpoint.list",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The ep's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The ep's ID",
                            "example": "ep_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Endpoints",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointOut = await svix.endpoint.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_endpoint_out = await svix.endpoint.list(\"app_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEndpointOut, err := svixClient.Endpoint.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEndpointOut = svix.endpoint.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEndpointOut listResponseEndpointOut = svix.getEndpoint().list(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_endpoint_out = svix.endpoint.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_endpoint_out = svix.endpoint().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEndpointOut = await svix.Endpoint.ListAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create a new endpoint for the application.\n\nWhen `secret` is `null` the secret is automatically generated (recommended)",
                "operationId": "v1.endpoint.create",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.create(\"app_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"],\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-ep-identifier\",\n    url=\"https://example.com/webhook/\",\n    version=1,\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.create(\"app_id\", EndpointIn(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-ep-identifier\",\n    url=\"https://example.com/webhook/\",\n    version=1,\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"],\n    secret=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Create(ctx, \"app_id\", &EndpointIn{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-ep-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Version: 1,\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    Secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.create(\"app_id\", EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-ep-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .version(1)\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().create(\"app_id\", new EndpointIn()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-ep-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .version(1)\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .secret(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.create(\"app_id\", Svix::EndpointIn.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-ep-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1,\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().create(\"app_id\", EndpointIn {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-ep-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    version: 1,\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    secret: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.CreateAsync(\"app_id\", new EndpointIn{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"},\n    secret: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint create \"app_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-ep-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1,\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-ep-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"version\": 1,\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"secret\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/": {
            "delete": {
                "description": "Delete an endpoint.",
                "operationId": "v1.endpoint.delete",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.Delete(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.delete(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().delete(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.DeleteAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint delete \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an endpoint.",
                "operationId": "v1.endpoint.get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.get(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Get(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().get(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.GetAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an endpoint.",
                "operationId": "patch_endpoint",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint",
                "tags": [
                    "Endpoint"
                ]
            },
            "put": {
                "description": "Update an endpoint.",
                "operationId": "v1.endpoint.update",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointOut = await svix.endpoint.update(\"app_id\", \"endpoint_id\", {\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: [\"user.signup\", \"user.deleted\"],\n    channels: [\"project_123\", \"group_2\"]\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-ep-identifier\",\n    url=\"https://example.com/webhook/\",\n    version=1,\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_out = await svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate(\n    description=\"An example endpoint name\",\n    rate_limit=None,\n    uid=\"unique-ep-identifier\",\n    url=\"https://example.com/webhook/\",\n    version=1,\n    disabled=False,\n    filter_types=[\"user.signup\", \"user.deleted\"],\n    channels=[\"project_123\", \"group_2\"]\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointOut, err := svixClient.Endpoint.Update(ctx, \"app_id\", \"endpoint_id\", &EndpointUpdate{\n    Description: \"An example endpoint name\",\n    RateLimit: nil,\n    Uid: \"unique-ep-identifier\",\n    Url: \"https://example.com/webhook/\",\n    Version: 1,\n    Disabled: false,\n    FilterTypes: []string{\"user.signup\", \"user.deleted\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointOut = svix.endpoint.update(\"app_id\", \"endpoint_id\", EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-ep-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .version(1)\n    .disabled(false)\n    .filterTypes(arrayOf(\"user.signup\", \"user.deleted\"))\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointOut endpointOut = svix.getEndpoint().update(\"app_id\", \"endpoint_id\", new EndpointUpdate()\n    .description(\"An example endpoint name\")\n    .rateLimit(null)\n    .uid(\"unique-ep-identifier\")\n    .url(\"https://example.com/webhook/\")\n    .version(1)\n    .disabled(false)\n    .filterTypes(new String[]{\"user.signup\", \"user.deleted\"})\n    .channels(new String[]{\"project_123\", \"group_2\"})\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_out = svix.endpoint.update(\"app_id\", \"endpoint_id\", Svix::EndpointUpdate.new({\n    \"description\": \"An example endpoint name\",\n    \"rate_limit\": nil,\n    \"uid\": \"unique-ep-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1,\n    \"disabled\": false,\n    \"filter_types\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_out = svix.endpoint().update(\"app_id\", \"endpoint_id\", EndpointUpdate {\n    description: Some(\"An example endpoint name\".to_string()),\n    rate_limit: None,\n    uid: Some(\"unique-ep-identifier\".to_string()),\n    url: \"https://example.com/webhook/\".to_string(),\n    version: 1,\n    disabled: Some(false),\n    filter_types: Some(vec![\"user.signup\".to_string(), \"user.deleted\".to_string()]),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointOut = await svix.Endpoint.UpdateAsync(\"app_id\", \"endpoint_id\", new EndpointUpdate{\n    description: \"An example endpoint name\",\n    rateLimit: null,\n    uid: \"unique-ep-identifier\",\n    url: \"https://example.com/webhook/\",\n    version: 1,\n    disabled: false,\n    filterTypes: new string[] {\"user.signup\", \"user.deleted\"},\n    channels: new string[] {\"project_123\", \"group_2\"}\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update \"app_id\" \"endpoint_id\" '{\n    \"description\": \"An example endpoint name\",\n    \"rateLimit\": null,\n    \"uid\": \"unique-ep-identifier\",\n    \"url\": \"https://example.com/webhook/\",\n    \"version\": 1,\n    \"disabled\": false,\n    \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n    \"channels\": [\"project_123\", \"group_2\"]\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"An example endpoint name\",\n        \"rateLimit\": null,\n        \"uid\": \"unique-ep-identifier\",\n        \"url\": \"https://example.com/webhook/\",\n        \"version\": 1,\n        \"disabled\": false,\n        \"filterTypes\": [\"user.signup\", \"user.deleted\"],\n        \"channels\": [\"project_123\", \"group_2\"]\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/": {
            "get": {
                "description": "Get the additional headers to be sent with the webhook",
                "operationId": "v1.endpoint.get-headers",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointHeadersOut = await svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_headers_out = await svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointHeadersOut, err := svixClient.Endpoint.GetHeaders(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointHeadersOut = svix.endpoint.getHeaders(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointHeadersOut endpointHeadersOut = svix.getEndpoint().getHeaders(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_headers_out = svix.endpoint.get_headers(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_headers_out = svix.endpoint().get_headers(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointHeadersOut = await svix.Endpoint.GetHeadersAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-headers \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially set the additional headers to be sent with the webhook",
                "operationId": "v1.endpoint.patch-headers",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersPatchIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.PatchHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersPatchIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.patchHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn()\n    .headers(\"\"\"{\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\"\"\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().patchHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn()\n    .headers(\"{\\\"X-Example\\\":\\\"123\\\",\\\"X-Foobar\\\":\\\"Bar\\\"}\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.patch_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersPatchIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().patch_headers(\"app_id\", \"endpoint_id\", EndpointHeadersPatchIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.PatchHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersPatchIn{\n    headers: new {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint patch-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            },
            "put": {
                "description": "Set the additional headers to be sent with the webhook",
                "operationId": "v1.endpoint.update-headers",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointHeadersIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Endpoint Headers",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", {\n    headers: {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn(\n    headers={\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"}\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.UpdateHeaders(ctx, \"app_id\", \"endpoint_id\", &EndpointHeadersIn{\n    Headers: map[string]interface{}{\"X-Example\": \"123\", \"X-Foobar\": \"Bar\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.updateHeaders(\"app_id\", \"endpoint_id\", EndpointHeadersIn()\n    .headers(\"\"\"{\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\"\"\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().updateHeaders(\"app_id\", \"endpoint_id\", new EndpointHeadersIn()\n    .headers(\"{\\\"X-Example\\\":\\\"123\\\",\\\"X-Foobar\\\":\\\"Bar\\\"}\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.update_headers(\"app_id\", \"endpoint_id\", Svix::EndpointHeadersIn.new({\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().update_headers(\"app_id\", \"endpoint_id\", EndpointHeadersIn {\n    headers: json!({\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.UpdateHeadersAsync(\"app_id\", \"endpoint_id\", new EndpointHeadersIn{\n    headers: new {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint update-headers \"app_id\" \"endpoint_id\" '{\n    \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"headers\": {\"X-Example\":\"123\",\"X-Foobar\":\"Bar\"}\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/": {
            "get": {
                "description": "List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.\n\nThe `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.",
                "operationId": "v1.message-attempt.list-attempted-messages",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The msg's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The msg's ID",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointMessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Messages",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEndpointMessageOut = await svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_endpoint_message_out = await svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEndpointMessageOut, err := svixClient.MessageAttempt.ListAttemptedMessages(ctx, \"app_id\", \"endpoint_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEndpointMessageOut = svix.messageAttempt.listAttemptedMessages(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEndpointMessageOut listResponseEndpointMessageOut = svix.getMessageAttempt().listAttemptedMessages(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_endpoint_message_out = svix.message_attempt.list_attempted_messages(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_endpoint_message_out = svix.message_attempt().list_attempted_messages(\"app_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEndpointMessageOut = await svix.MessageAttempt.ListAttemptedMessagesAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-attempted-messages \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt/": {
            "post": {
                "description": "Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned.\nFIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn't publicly documented anyway, it should be fine",
                "operationId": "create_message_attempt_for_endpoint",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message Attempt For Endpoint",
                "tags": [
                    "Message"
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/": {
            "post": {
                "description": "Resend all failed messages since a given time.",
                "operationId": "v1.endpoint.recover",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecoverIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecoverOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Recover Failed Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const recoverOut = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "recover_out = await svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn(\n    until=None\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "recoverOut, err := svixClient.Endpoint.Recover(ctx, \"app_id\", \"endpoint_id\", &RecoverIn{\n    Until: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val recoverOut = svix.endpoint.recover(\"app_id\", \"endpoint_id\", RecoverIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "RecoverOut recoverOut = svix.getEndpoint().recover(\"app_id\", \"endpoint_id\", new RecoverIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "recover_out = svix.endpoint.recover(\"app_id\", \"endpoint_id\", Svix::RecoverIn.new({\n    \"until\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let recover_out = svix.endpoint().recover(\"app_id\", \"endpoint_id\", RecoverIn {\n    until: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var recoverOut = await svix.Endpoint.RecoverAsync(\"app_id\", \"endpoint_id\", new RecoverIn{\n    until: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint recover \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"until\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/": {
            "post": {
                "description": "Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.",
                "operationId": "v1.endpoint.replay",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReplayIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReplayOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Replay Missing Webhooks",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const replayOut = await svix.endpoint.replay(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const replayOut = await svix.endpoint.replay(\"app_id\", \"endpoint_id\", {\n    until: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "replay_out = svix.endpoint.replay(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "replay_out = await svix.endpoint.replay(\"app_id\", \"endpoint_id\", ReplayIn(\n    until=None\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "replayOut, err := svixClient.Endpoint.Replay(ctx, \"app_id\", \"endpoint_id\", &ReplayIn{\n    Until: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val replayOut = svix.endpoint.replay(\"app_id\", \"endpoint_id\", ReplayIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ReplayOut replayOut = svix.getEndpoint().replay(\"app_id\", \"endpoint_id\", new ReplayIn()\n    .until(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "replay_out = svix.endpoint.replay(\"app_id\", \"endpoint_id\", Svix::ReplayIn.new({\n    \"until\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let replay_out = svix.endpoint().replay(\"app_id\", \"endpoint_id\", ReplayIn {\n    until: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var replayOut = await svix.Endpoint.ReplayAsync(\"app_id\", \"endpoint_id\", new ReplayIn{\n    until: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint replay \"app_id\" \"endpoint_id\" '{\n    \"until\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"until\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/": {
            "get": {
                "description": "Get the endpoint's signing secret.\n\nThis is used to verify the authenticity of the webhook.\nFor more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).",
                "operationId": "v1.endpoint.get-secret",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointSecretOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointSecretOut = await svix.endpoint.getSecret(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_secret_out = await svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointSecretOut, err := svixClient.Endpoint.GetSecret(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointSecretOut = svix.endpoint.getSecret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointSecretOut endpointSecretOut = svix.getEndpoint().getSecret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_secret_out = svix.endpoint.get_secret(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_secret_out = svix.endpoint().get_secret(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointSecretOut = await svix.Endpoint.GetSecretAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-secret \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/": {
            "post": {
                "description": "Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.",
                "operationId": "v1.endpoint.rotate-secret",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointSecretRotateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Endpoint Secret",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", {\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn(\n    key=\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.RotateSecret(ctx, \"app_id\", \"endpoint_id\", &EndpointSecretRotateIn{\n    Key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.rotateSecret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().rotateSecret(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn()\n    .key(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.rotate_secret(\"app_id\", \"endpoint_id\", Svix::EndpointSecretRotateIn.new({\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().rotate_secret(\"app_id\", \"endpoint_id\", EndpointSecretRotateIn {\n    key: Some(\"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.RotateSecretAsync(\"app_id\", \"endpoint_id\", new EndpointSecretRotateIn{\n    key: \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint rotate-secret \"app_id\" \"endpoint_id\" '{\n    \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"key\": \"whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/": {
            "post": {
                "description": "Send an example message for event",
                "operationId": "v1.endpoint.send-example",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventExampleIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Send Event Type Example Message",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.endpoint.send_example(\"app_id\", \"endpoint_id\", EventExampleIn(\n    event_type=\"user.signup\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Endpoint.SendExample(ctx, \"app_id\", \"endpoint_id\", &EventExampleIn{\n    EventType: \"user.signup\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.endpoint.sendExample(\"app_id\", \"endpoint_id\", EventExampleIn()\n    .eventType(\"user.signup\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getEndpoint().sendExample(\"app_id\", \"endpoint_id\", new EventExampleIn()\n    .eventType(\"user.signup\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.endpoint.send_example(\"app_id\", \"endpoint_id\", Svix::EventExampleIn.new({\n    \"event_type\": \"user.signup\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.endpoint().send_example(\"app_id\", \"endpoint_id\", EventExampleIn {\n    event_type: \"user.signup\".to_string(),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Endpoint.SendExampleAsync(\"app_id\", \"endpoint_id\", new EventExampleIn{\n    eventType: \"user.signup\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint send-example \"app_id\" \"endpoint_id\" '{\n    \"eventType\": \"user.signup\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/": {
            "get": {
                "description": "Get basic statistics for the endpoint.",
                "operationId": "v1.endpoint.get-stats",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "since",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "until",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Endpoint Stats",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointStats = await svix.endpoint.getStats(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_stats = await svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointStats, err := svixClient.Endpoint.GetStats(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointStats = svix.endpoint.getStats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointStats endpointStats = svix.getEndpoint().getStats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_stats = svix.endpoint.get_stats(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_stats = svix.endpoint().get_stats(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointStats = await svix.Endpoint.GetStatsAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint get-stats \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/": {
            "get": {
                "description": "Get the transformation code associated with this endpoint",
                "operationId": "v1.endpoint.transformation-get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointTransformationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationOut = await svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_transformation_out = await svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointTransformationOut, err := svixClient.Endpoint.TransformationGet(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointTransformationOut = svix.endpoint.transformationGet(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointTransformationOut endpointTransformationOut = svix.getEndpoint().transformationGet(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_transformation_out = svix.endpoint.transformation_get(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_transformation_out = svix.endpoint().transformation_get(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointTransformationOut = await svix.Endpoint.TransformationGetAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint transformation-get \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Set or unset the transformation code associated with this endpoint",
                "operationId": "v1.endpoint.transformation-partial-update",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointTransformationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Set Endpoint Transformation",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", {\n    code: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn(\n    code=None\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn(\n    code=None\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Endpoint.TransformationPartialUpdate(ctx, \"app_id\", \"endpoint_id\", &EndpointTransformationIn{\n    Code: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.endpoint.transformationPartialUpdate(\"app_id\", \"endpoint_id\", EndpointTransformationIn()\n    .code(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEndpoint().transformationPartialUpdate(\"app_id\", \"endpoint_id\", new EndpointTransformationIn()\n    .code(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.endpoint.transformation_partial_update(\"app_id\", \"endpoint_id\", Svix::EndpointTransformationIn.new({\n    \"code\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.endpoint().transformation_partial_update(\"app_id\", \"endpoint_id\", EndpointTransformationIn {\n    code: None,\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Endpoint.TransformationPartialUpdateAsync(\"app_id\", \"endpoint_id\", new EndpointTransformationIn{\n    code: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint transformation-partial-update \"app_id\" \"endpoint_id\" '{\n    \"code\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PATCH' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"code\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate/": {
            "post": {
                "description": "Simulate running the transformation on the payload and code",
                "operationId": "v1.endpoint.transformation-simulate",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointTransformationSimulateIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointTransformationSimulateOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Simulate",
                "tags": [
                    "Endpoint"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationSimulateOut = await svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const endpointTransformationSimulateOut = await svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", {\n    eventType: \"user.signup\",\n    channels: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "endpoint_transformation_simulate_out = svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", EndpointTransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "endpoint_transformation_simulate_out = await svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", EndpointTransformationSimulateIn(\n    event_type=\"user.signup\",\n    channels=None\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "endpointTransformationSimulateOut, err := svixClient.Endpoint.TransformationSimulate(ctx, \"app_id\", \"endpoint_id\", &EndpointTransformationSimulateIn{\n    EventType: \"user.signup\",\n    Channels: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val endpointTransformationSimulateOut = svix.endpoint.transformationSimulate(\"app_id\", \"endpoint_id\", EndpointTransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EndpointTransformationSimulateOut endpointTransformationSimulateOut = svix.getEndpoint().transformationSimulate(\"app_id\", \"endpoint_id\", new EndpointTransformationSimulateIn()\n    .eventType(\"user.signup\")\n    .channels(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "endpoint_transformation_simulate_out = svix.endpoint.transformation_simulate(\"app_id\", \"endpoint_id\", Svix::EndpointTransformationSimulateIn.new({\n    \"event_type\": \"user.signup\",\n    \"channels\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let endpoint_transformation_simulate_out = svix.endpoint().transformation_simulate(\"app_id\", \"endpoint_id\", EndpointTransformationSimulateIn {\n    event_type: \"user.signup\".to_string(),\n    channels: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var endpointTransformationSimulateOut = await svix.Endpoint.TransformationSimulateAsync(\"app_id\", \"endpoint_id\", new EndpointTransformationSimulateIn{\n    eventType: \"user.signup\",\n    channels: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix endpoint transformation-simulate \"app_id\" \"endpoint_id\" '{\n    \"eventType\": \"user.signup\",\n    \"channels\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventType\": \"user.signup\",\n        \"channels\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/": {
            "get": {
                "description": "List the application's integrations.",
                "operationId": "v1.integration.list",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_IntegrationOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Integrations",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseIntegrationOut = await svix.integration.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_integration_out = svix.integration.list(\"app_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_integration_out = await svix.integration.list(\"app_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseIntegrationOut, err := svixClient.Integration.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseIntegrationOut = svix.integration.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseIntegrationOut listResponseIntegrationOut = svix.getIntegration().list(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_integration_out = svix.integration.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_integration_out = svix.integration().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseIntegrationOut = await svix.Integration.ListAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create an integration.",
                "operationId": "v1.integration.create",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.create(\"app_id\", {\n    name: \"Example Integration\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.create(\"app_id\", IntegrationIn(\n    name=\"Example Integration\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Create(ctx, \"app_id\", &IntegrationIn{\n    Name: \"Example Integration\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.create(\"app_id\", IntegrationIn()\n    .name(\"Example Integration\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().create(\"app_id\", new IntegrationIn()\n    .name(\"Example Integration\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.create(\"app_id\", Svix::IntegrationIn.new({\n    \"name\": \"Example Integration\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().create(\"app_id\", IntegrationIn {\n    name: \"Example Integration\".to_string(),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.CreateAsync(\"app_id\", new IntegrationIn{\n    name: \"Example Integration\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration create \"app_id\" '{\n    \"name\": \"Example Integration\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"Example Integration\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/": {
            "delete": {
                "description": "Delete an integration.",
                "operationId": "v1.integration.delete",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Integration.Delete(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getIntegration().delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.integration.delete(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.integration().delete(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Integration.DeleteAsync(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration delete \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/{integ_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an integration.",
                "operationId": "v1.integration.get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.get(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Get(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.get(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().get(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.GetAsync(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration get \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/{integ_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "put": {
                "description": "Update an integration.",
                "operationId": "v1.integration.update",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Integration",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationOut = await svix.integration.update(\"app_id\", \"integ_id\", {\n    name: \"Example Integration\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_out = await svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate(\n    name=\"Example Integration\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationOut, err := svixClient.Integration.Update(ctx, \"app_id\", \"integ_id\", &IntegrationUpdate{\n    Name: \"Example Integration\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationOut = svix.integration.update(\"app_id\", \"integ_id\", IntegrationUpdate()\n    .name(\"Example Integration\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationOut integrationOut = svix.getIntegration().update(\"app_id\", \"integ_id\", new IntegrationUpdate()\n    .name(\"Example Integration\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_out = svix.integration.update(\"app_id\", \"integ_id\", Svix::IntegrationUpdate.new({\n    \"name\": \"Example Integration\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_out = svix.integration().update(\"app_id\", \"integ_id\", IntegrationUpdate {\n    name: \"Example Integration\".to_string(),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationOut = await svix.Integration.UpdateAsync(\"app_id\", \"integ_id\", new IntegrationUpdate{\n    name: \"Example Integration\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration update \"app_id\" \"integ_id\" '{\n    \"name\": \"Example Integration\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/{integ_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"Example Integration\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key/": {
            "get": {
                "description": "Get an integration's key.",
                "operationId": "v1.integration.get-key",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.getKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_key_out = await svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationKeyOut, err := svixClient.Integration.GetKey(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationKeyOut = svix.integration.getKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().getKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_key_out = svix.integration.get_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_key_out = svix.integration().get_key(\"app_id\", \"integ_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationKeyOut = await svix.Integration.GetKeyAsync(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration get-key \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/integration/{integ_id}/key/rotate/": {
            "post": {
                "description": "Rotate the integration's key. The previous key will be immediately revoked.",
                "operationId": "v1.integration.rotate-key",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The integ's ID",
                        "in": "path",
                        "name": "integ_id",
                        "required": true,
                        "schema": {
                            "description": "The integ's ID",
                            "example": "integ_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationKeyOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Rotate Integration Key",
                "tags": [
                    "Integration"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const integrationKeyOut = await svix.integration.rotateKey(\"app_id\", \"integ_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "integration_key_out = await svix.integration.rotate_key(\"app_id\", \"integ_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "integrationKeyOut, err := svixClient.Integration.RotateKey(ctx, \"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val integrationKeyOut = svix.integration.rotateKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "IntegrationKeyOut integrationKeyOut = svix.getIntegration().rotateKey(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "integration_key_out = svix.integration.rotate_key(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let integration_key_out = svix.integration().rotate_key(\"app_id\", \"integ_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var integrationKeyOut = await svix.Integration.RotateKeyAsync(\"app_id\", \"integ_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix integration rotate-key \"app_id\" \"integ_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/integration/{integ_id}/key/rotate/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/": {
            "get": {
                "description": "List all of the application's messages.\n\nThe `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results\nwithin a certain window.",
                "operationId": "v1.message.list",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The msg's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The msg's ID",
                            "example": "msg_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Messages",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageOut = await svix.message.list(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_out = svix.message.list(\"app_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_out = await svix.message.list(\"app_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageOut, err := svixClient.Message.List(ctx, \"app_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageOut = svix.message.list(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageOut listResponseMessageOut = svix.getMessage().list(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_out = svix.message.list(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_out = svix.message().list(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageOut = await svix.Message.ListAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message list \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Creates a new message and dispatches it to all of the application's endpoints.\n\nThe `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.\nIf a message with the same `eventId` already exists for any application in your environment, a 409 conflict error will be returned.\n\nThe `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.\nMessages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.\n\nThe `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.",
                "operationId": "v1.message.create",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-msg-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    payloadRetentionPeriod: 90,\n    application: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.create(\"app_id\", {\n    eventId: \"unique-msg-identifier\",\n    eventType: \"user.signup\",\n    payload: {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n    channels: [\"project_123\", \"group_2\"],\n    payloadRetentionPeriod: 90,\n    application: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-msg-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    payload_retention_period=90,\n    application=None\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.message.create(\"app_id\", MessageIn(\n    event_id=\"unique-msg-identifier\",\n    event_type=\"user.signup\",\n    payload={\"email\": \"test@example.com\", \"username\": \"test_user\"},\n    channels=[\"project_123\", \"group_2\"],\n    payload_retention_period=90,\n    application=None\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Message.Create(ctx, \"app_id\", &MessageIn{\n    EventId: \"unique-msg-identifier\",\n    EventType: \"user.signup\",\n    Payload: map[string]interface{}{\"email\": \"test@example.com\", \"username\": \"test_user\"},\n    Channels: []string{\"project_123\", \"group_2\"},\n    PayloadRetentionPeriod: 90,\n    Application: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.message.create(\"app_id\", MessageIn()\n    .eventId(\"unique-msg-identifier\")\n    .eventType(\"user.signup\")\n    .payload(\"\"\"{\"email\":\"test@example.com\",\"username\":\"test_user\"}\"\"\")\n    .channels(arrayOf(\"project_123\", \"group_2\"))\n    .payloadRetentionPeriod(90)\n    .application(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getMessage().create(\"app_id\", new MessageIn()\n    .eventId(\"unique-msg-identifier\")\n    .eventType(\"user.signup\")\n    .payload(\"{\\\"email\\\":\\\"test@example.com\\\",\\\"username\\\":\\\"test_user\\\"}\")\n    .channels(new String[]{\"project_123\", \"group_2\"})\n    .payloadRetentionPeriod(90)\n    .application(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.message.create(\"app_id\", Svix::MessageIn.new({\n    \"event_id\": \"unique-msg-identifier\",\n    \"event_type\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"payload_retention_period\": 90,\n    \"application\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.message().create(\"app_id\", MessageIn {\n    event_id: Some(\"unique-msg-identifier\".to_string()),\n    event_type: \"user.signup\".to_string(),\n    payload: json!({\"email\":\"test@example.com\",\"username\":\"test_user\"}),\n    channels: Some(vec![\"project_123\".to_string(), \"group_2\".to_string()]),\n    payload_retention_period: Some(90),\n    application: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Message.CreateAsync(\"app_id\", new MessageIn{\n    eventId: \"unique-msg-identifier\",\n    eventType: \"user.signup\",\n    payload: new {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n    channels: new string[] {\"project_123\", \"group_2\"},\n    payloadRetentionPeriod: 90,\n    application: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message create \"app_id\" '{\n    \"eventId\": \"unique-msg-identifier\",\n    \"eventType\": \"user.signup\",\n    \"payload\": {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n    \"channels\": [\"project_123\", \"group_2\"],\n    \"payloadRetentionPeriod\": 90,\n    \"application\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventId\": \"unique-msg-identifier\",\n        \"eventType\": \"user.signup\",\n        \"payload\": {\"email\":\"test@example.com\",\"username\":\"test_user\"},\n        \"channels\": [\"project_123\", \"group_2\"],\n        \"payloadRetentionPeriod\": 90,\n        \"application\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/": {
            "get": {
                "description": "Get a message by its ID or eventID.",
                "operationId": "v1.message.get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": true,
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Message",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageOut = await svix.message.get(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_out = await svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageOut, err := svixClient.Message.Get(ctx, \"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageOut = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageOut messageOut = svix.getMessage().get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_out = svix.message.get(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_out = svix.message().get(\"app_id\", \"msg_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageOut = await svix.Message.GetAsync(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message get \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/": {
            "get": {
                "deprecated": true,
                "description": "Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.\n\n`msg_id`: Use a message id or a message `eventId`",
                "operationId": "v1.message-attempt.list-by-msg-deprecated",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "query",
                        "name": "endpoint_id",
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status_code_class",
                        "schema": {
                            "$ref": "#/components/schemas/StatusCodeClass",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsgDeprecated(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptOut = await svix.messageAttempt.listByMsgDeprecated(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg_deprecated(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_out = await svix.message_attempt.list_by_msg_deprecated(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptOut, err := svixClient.MessageAttempt.ListByMsgDeprecated(ctx, \"app_id\", \"msg_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptOut = svix.messageAttempt.listByMsgDeprecated(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptOut listResponseMessageAttemptOut = svix.getMessageAttempt().listByMsgDeprecated(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_out = svix.message_attempt.list_by_msg_deprecated(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_out = svix.message_attempt().list_by_msg_deprecated(\"app_id\", \"msg_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptOut = await svix.MessageAttempt.ListByMsgDeprecatedAsync(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-msg-deprecated \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/": {
            "get": {
                "description": "`msg_id`: Use a message id or a message `eventId`",
                "operationId": "v1.message-attempt.get",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptOut = await svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_attempt_out = await svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageAttemptOut, err := svixClient.MessageAttempt.Get(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageAttemptOut = svix.messageAttempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageAttemptOut messageAttemptOut = svix.getMessageAttempt().get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_attempt_out = svix.message_attempt.get(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_attempt_out = svix.message_attempt().get(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageAttemptOut = await svix.MessageAttempt.GetAsync(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt get \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/": {
            "delete": {
                "description": "Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.",
                "operationId": "v1.message-attempt.expunge-content",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete attempt response body",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.MessageAttempt.ExpungeContent(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.expungeContent(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt().expungeContent(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message_attempt.expunge_content(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt().expunge_content(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.MessageAttempt.ExpungeContentAsync(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt expunge-content \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers/": {
            "get": {
                "description": "Calculate and return headers used on a given message attempt",
                "operationId": "v1.message-attempt.get-headers",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "path",
                        "name": "attempt_id",
                        "required": true,
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageAttemptHeadersOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Attempt Headers",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptHeadersOut = await svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const messageAttemptHeadersOut = await svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "message_attempt_headers_out = svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "message_attempt_headers_out = await svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "messageAttemptHeadersOut, err := svixClient.MessageAttempt.GetHeaders(ctx, \"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val messageAttemptHeadersOut = svix.messageAttempt.getHeaders(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "MessageAttemptHeadersOut messageAttemptHeadersOut = svix.getMessageAttempt().getHeaders(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "message_attempt_headers_out = svix.message_attempt.get_headers(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let message_attempt_headers_out = svix.message_attempt().get_headers(\"app_id\", \"msg_id\", \"attempt_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var messageAttemptHeadersOut = await svix.MessageAttempt.GetHeadersAsync(\"app_id\", \"msg_id\", \"attempt_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt get-headers \"app_id\" \"msg_id\" \"attempt_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/content/": {
            "delete": {
                "description": "Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.\n\nThe message can't be replayed or resent once its payload has been deleted or expired.",
                "operationId": "v1.message.expunge-content",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete message payload",
                "tags": [
                    "Message"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.message.expungeContent(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Message.ExpungeContent(ctx, \"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.message.expungeContent(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessage().expungeContent(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message.expunge_content(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message().expunge_content(\"app_id\", \"msg_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Message.ExpungeContentAsync(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message expunge-content \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/content/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/": {
            "get": {
                "description": "`msg_id`: Use a message id or a message `eventId`",
                "operationId": "v1.message-attempt.list-attempted-destinations",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempted Destinations",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageEndpointOut = await svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_endpoint_out = await svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageEndpointOut, err := svixClient.MessageAttempt.ListAttemptedDestinations(ctx, \"app_id\", \"msg_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageEndpointOut = svix.messageAttempt.listAttemptedDestinations(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageEndpointOut listResponseMessageEndpointOut = svix.getMessageAttempt().listAttemptedDestinations(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_endpoint_out = svix.message_attempt.list_attempted_destinations(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_endpoint_out = svix.message_attempt().list_attempted_destinations(\"app_id\", \"msg_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageEndpointOut = await svix.MessageAttempt.ListAttemptedDestinationsAsync(\"app_id\", \"msg_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-attempted-destinations \"app_id\" \"msg_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/": {
            "get": {
                "deprecated": true,
                "description": "DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.\n\nList the message attempts for a particular endpoint.\n\nReturning the endpoint.\n\nThe `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.",
                "operationId": "v1.message-attempt.list-by-endpoint-deprecated",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The attempt's ID",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The attempt's ID",
                            "example": "atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "channel",
                        "schema": {
                            "example": "project_1337",
                            "maxLength": 128,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/MessageStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "schema": {
                            "items": {
                                "description": "The event type's name",
                                "example": "user.signup",
                                "maxLength": 256,
                                "pattern": "^[a-zA-Z0-9\\-_.]+$",
                                "type": "string"
                            },
                            "nullable": true,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_MessageAttemptEndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Attempts For Endpoint",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptEndpointOut = await svix.messageAttempt.listByEndpointDeprecated(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseMessageAttemptEndpointOut = await svix.messageAttempt.listByEndpointDeprecated(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_message_attempt_endpoint_out = svix.message_attempt.list_by_endpoint_deprecated(\"app_id\", \"msg_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_message_attempt_endpoint_out = await svix.message_attempt.list_by_endpoint_deprecated(\"app_id\", \"msg_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseMessageAttemptEndpointOut, err := svixClient.MessageAttempt.ListByEndpointDeprecated(ctx, \"app_id\", \"msg_id\", \"endpoint_id\", nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseMessageAttemptEndpointOut = svix.messageAttempt.listByEndpointDeprecated(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseMessageAttemptEndpointOut listResponseMessageAttemptEndpointOut = svix.getMessageAttempt().listByEndpointDeprecated(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_message_attempt_endpoint_out = svix.message_attempt.list_by_endpoint_deprecated(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_message_attempt_endpoint_out = svix.message_attempt().list_by_endpoint_deprecated(\"app_id\", \"msg_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseMessageAttemptEndpointOut = await svix.MessageAttempt.ListByEndpointDeprecatedAsync(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt list-by-endpoint-deprecated \"app_id\" \"msg_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/": {
            "post": {
                "description": "Resend a message to the specified endpoint.",
                "operationId": "v1.message-attempt.resend",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The msg's ID or UID",
                        "in": "path",
                        "name": "msg_id",
                        "required": true,
                        "schema": {
                            "description": "The msg's ID or UID",
                            "example": "unique-msg-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Resend Webhook",
                "tags": [
                    "Message Attempt"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.MessageAttempt.Resend(ctx, \"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.messageAttempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getMessageAttempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.message_attempt.resend(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.message_attempt().resend(\"app_id\", \"msg_id\", \"endpoint_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.MessageAttempt.ResendAsync(\"app_id\", \"msg_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix message-attempt resend \"app_id\" \"msg_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/app/{app_id}/stats/": {
            "get": {
                "description": "Get basic statistics for the application",
                "operationId": "v1.application.get-stats",
                "parameters": [
                    {
                        "in": "query",
                        "name": "since",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "until",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplicationStats"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Stats",
                "tags": [
                    "Application"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const applicationStats = await svix.application.getStats(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const applicationStats = await svix.application.getStats(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "application_stats = svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "application_stats = await svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "applicationStats, err := svixClient.Application.GetStats(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val applicationStats = svix.application.getStats(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ApplicationStats applicationStats = svix.getApplication().getStats(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "application_stats = svix.application.get_stats(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let application_stats = svix.application().get_stats(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var applicationStats = await svix.Application.GetStatsAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix application get-stats \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/app/{app_id}/stats/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/auth/app-portal-access/{app_id}/": {
            "post": {
                "description": "Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
                "operationId": "v1.authentication.app-portal-access",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppPortalAccessIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppPortalAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Consumer App Portal Access",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    featureFlags: []\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const appPortalAccessOut = await svix.authentication.appPortalAccess(\"app_id\", {\n    featureFlags: []\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    feature_flags=[]\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "app_portal_access_out = await svix.authentication.app_portal_access(\"app_id\", AppPortalAccessIn(\n    feature_flags=[]\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "appPortalAccessOut, err := svixClient.Authentication.AppPortalAccess(ctx, \"app_id\", &AppPortalAccessIn{\n    FeatureFlags: []interface{}{},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val appPortalAccessOut = svix.authentication.appPortalAccess(\"app_id\", AppPortalAccessIn()\n    .featureFlags(arrayOf())\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AppPortalAccessOut appPortalAccessOut = svix.getAuthentication().appPortalAccess(\"app_id\", new AppPortalAccessIn()\n    .featureFlags(new Object[]{})\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "app_portal_access_out = svix.authentication.app_portal_access(\"app_id\", Svix::AppPortalAccessIn.new({\n    \"feature_flags\": []\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let app_portal_access_out = svix.authentication().app_portal_access(\"app_id\", AppPortalAccessIn {\n    feature_flags: Some(vec![]),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var appPortalAccessOut = await svix.Authentication.AppPortalAccessAsync(\"app_id\", new AppPortalAccessIn{\n    featureFlags: new Object[] {}\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication app-portal-access \"app_id\" '{\n    \"featureFlags\": []\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/auth/app-portal-access/{app_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"featureFlags\": []\n    }'"
                    }
                ]
            }
        },
        "/api/v1/auth/app/{app_id}/expire-all/": {
            "post": {
                "description": "Expire all of the tokens associated with a specific Application",
                "operationId": "v1.authentication.expire-all",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplicationTokenExpireIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Expire All",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.expireAll(\"app_id\", {\n    expiry: 60\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.authentication.expire_all(\"app_id\", ApplicationTokenExpireIn(\n    expiry=60\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Authentication.ExpireAll(ctx, \"app_id\", &ApplicationTokenExpireIn{\n    Expiry: 60,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.expireAll(\"app_id\", ApplicationTokenExpireIn()\n    .expiry(60)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().expireAll(\"app_id\", new ApplicationTokenExpireIn()\n    .expiry(60)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.authentication.expire_all(\"app_id\", Svix::ApplicationTokenExpireIn.new({\n    \"expiry\": 60\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().expire_all(\"app_id\", ApplicationTokenExpireIn {\n    expiry: Some(60),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Authentication.ExpireAllAsync(\"app_id\", new ApplicationTokenExpireIn{\n    expiry: 60\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication expire-all \"app_id\" '{\n    \"expiry\": 60\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/auth/app/{app_id}/expire-all/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"expiry\": 60\n    }'"
                    }
                ]
            }
        },
        "/api/v1/auth/dashboard-access/{app_id}/": {
            "post": {
                "deprecated": true,
                "description": "DEPRECATED: Please use `app-portal-access` instead.\n\nUse this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.",
                "operationId": "v1.authentication.dashboard-access",
                "parameters": [
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardAccessOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Dashboard Access",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const dashboardAccessOut = await svix.authentication.dashboardAccess(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const dashboardAccessOut = await svix.authentication.dashboardAccess(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "dashboard_access_out = svix.authentication.dashboard_access(\"app_id\", None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "dashboard_access_out = await svix.authentication.dashboard_access(\"app_id\", None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "dashboardAccessOut, err := svixClient.Authentication.DashboardAccess(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val dashboardAccessOut = svix.authentication.dashboardAccess(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "DashboardAccessOut dashboardAccessOut = svix.getAuthentication().dashboardAccess(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "dashboard_access_out = svix.authentication.dashboard_access(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let dashboard_access_out = svix.authentication().dashboard_access(\"app_id\", None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var dashboardAccessOut = await svix.Authentication.DashboardAccessAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication dashboard-access \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/auth/dashboard-access/{app_id}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/auth/logout/": {
            "post": {
                "description": "Logout an app token.\n\nTrying to log out other tokens will fail.",
                "operationId": "v1.authentication.logout",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Logout",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.authentication.logout();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.authentication.logout(None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.authentication.logout(None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Authentication.Logout(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getAuthentication().logout()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.authentication.logout()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.authentication().logout(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Authentication.LogoutAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication logout "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/auth/logout/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/auth/one-time-token/": {
            "post": {
                "description": "This is a one time token",
                "operationId": "v1.authentication.exchange-one-time-token",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OneTimeTokenIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OneTimeTokenOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Exchange One Time Token",
                "tags": [
                    "Authentication"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const oneTimeTokenOut = await svix.authentication.exchangeOneTimeToken(\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const oneTimeTokenOut = await svix.authentication.exchangeOneTimeToken(\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "one_time_token_out = svix.authentication.exchange_one_time_token(OneTimeTokenIn\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "one_time_token_out = await svix.authentication.exchange_one_time_token(OneTimeTokenIn\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "oneTimeTokenOut, err := svixClient.Authentication.ExchangeOneTimeToken(ctx, &OneTimeTokenIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val oneTimeTokenOut = svix.authentication.exchangeOneTimeToken(OneTimeTokenIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "OneTimeTokenOut oneTimeTokenOut = svix.getAuthentication().exchangeOneTimeToken(new OneTimeTokenIn()\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "one_time_token_out = svix.authentication.exchange_one_time_token(Svix::OneTimeTokenIn.new(\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let one_time_token_out = svix.authentication().exchange_one_time_token(OneTimeTokenIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var oneTimeTokenOut = await svix.Authentication.ExchangeOneTimeTokenAsync(new OneTimeTokenIn\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix authentication exchange-one-time-token '\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/auth/one-time-token/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '\n    }'"
                    }
                ]
            }
        },
        "/api/v1/background-task/": {
            "get": {
                "description": "List background tasks executed in the past 90 days.",
                "operationId": "list_background_tasks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskStatus",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "task",
                        "schema": {
                            "$ref": "#/components/schemas/BackgroundTaskType",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_BackgroundTaskOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Background Tasks",
                "tags": [
                    "Background Tasks"
                ]
            }
        },
        "/api/v1/background-task/{task_id}/": {
            "get": {
                "description": "Get a background task by ID.",
                "operationId": "get_background_task",
                "parameters": [
                    {
                        "in": "path",
                        "name": "task_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BackgroundTaskOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Background Task",
                "tags": [
                    "Background Tasks"
                ]
            }
        },
        "/api/v1/environment/export/": {
            "post": {
                "description": "Download a JSON file containing all org-settings and event types",
                "operationId": "v1.environment.export",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportEnvironmentIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Export Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentOut = await svix.environment.export(\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentOut = await svix.environment.export(\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_out = svix.environment.export(ExportEnvironmentIn\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_out = await svix.environment.export(ExportEnvironmentIn\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentOut, err := svixClient.Environment.Export(ctx, &ExportEnvironmentIn{\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentOut = svix.environment.export(ExportEnvironmentIn()\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentOut environmentOut = svix.getEnvironment().export(new ExportEnvironmentIn()\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_out = svix.environment.export(Svix::ExportEnvironmentIn.new(\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_out = svix.environment().export(ExportEnvironmentIn {\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentOut = await svix.Environment.ExportAsync(new ExportEnvironmentIn\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment export '\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/environment/export/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '\n    }'"
                    }
                ]
            }
        },
        "/api/v1/environment/import/": {
            "post": {
                "description": "Import a configuration into the active organization.\nIt doesn't delete anything, only adds/updates what was passed to it.",
                "operationId": "v1.environment.import",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Import Environment Configuration",
                "tags": [
                    "Environment"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.environment.import({\n    eventTypes: null,\n    settings: null\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.environment.import(EnvironmentIn(\n    event_types=None,\n    settings=None\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Environment.Import(ctx, &EnvironmentIn{\n    EventTypes: nil,\n    Settings: nil,\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.environment.import(EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEnvironment().import(new EnvironmentIn()\n    .eventTypes(null)\n    .settings(null)\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.environment.import(Svix::EnvironmentIn.new({\n    \"event_types\": nil,\n    \"settings\": nil\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.environment().import(EnvironmentIn {\n    event_types: None,\n    settings: None,\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Environment.ImportAsync(new EnvironmentIn{\n    eventTypes: null,\n    settings: null\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment import '{\n    \"eventTypes\": null,\n    \"settings\": null\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/environment/import/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"eventTypes\": null,\n        \"settings\": null\n    }'"
                    }
                ]
            }
        },
        "/api/v1/environment/settings/": {
            "get": {
                "description": "Get the environment's settings",
                "operationId": "v1.environment.get-settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentSettingsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Org Settings",
                "tags": [
                    "Environment-Settings"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const environmentSettingsOut = await svix.environment.getSettings();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const environmentSettingsOut = await svix.environment.getSettings();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "environment_settings_out = svix.environment.get_settings()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "environment_settings_out = await svix.environment.get_settings()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "environmentSettingsOut, err := svixClient.Environment.GetSettings(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val environmentSettingsOut = svix.environment.getSettings()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EnvironmentSettingsOut environmentSettingsOut = svix.getEnvironment().getSettings()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "environment_settings_out = svix.environment.get_settings()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let environment_settings_out = svix.environment().get_settings().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var environmentSettingsOut = await svix.Environment.GetSettingsAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix environment get-settings "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/environment/settings/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/event-type/": {
            "get": {
                "description": "Return the list of event types.",
                "operationId": "v1.event-type.list",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "format": "uint64",
                            "maximum": 250,
                            "minimum": 1,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The event type's name",
                        "in": "query",
                        "name": "iterator",
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "nullable": true,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "include_archived",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "with_content",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EventTypeOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "List Event Types",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEventTypeOut = await svix.eventType.list();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const listResponseEventTypeOut = await svix.eventType.list();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "list_response_event_type_out = svix.event_type.list(None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "list_response_event_type_out = await svix.event_type.list(None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "listResponseEventTypeOut, err := svixClient.EventType.List(ctx, nil)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val listResponseEventTypeOut = svix.eventType.list()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "ListResponseEventTypeOut listResponseEventTypeOut = svix.getEventType().list()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "list_response_event_type_out = svix.event_type.list()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let list_response_event_type_out = svix.event_type().list(None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var listResponseEventTypeOut = await svix.EventType.ListAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type list "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/event-type/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "post": {
                "description": "Create new or unarchive existing event type.\n\nUnarchiving an event type will allow endpoints to filter on it and messages to be sent with it.\nEndpoints filtering on the event type before archival will continue to filter on it.\nThis operation does not preserve the description and schemas.",
                "operationId": "v1.event-type.create",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.create({\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\"\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.create(EventTypeIn(\n    name=\"user.signup\",\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\"\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Create(ctx, &EventTypeIn{\n    Name: \"user.signup\",\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    FeatureFlag: \"cool-new-feature\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.create(EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(\"\"\"{\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}}\"\"\")\n    .featureFlag(\"cool-new-feature\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().create(new EventTypeIn()\n    .name(\"user.signup\")\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(\"{\\\"1\\\":{\\\"description\\\":\\\"An invoice was paid by a user\\\",\\\"properties\\\":{\\\"invoiceId\\\":{\\\"description\\\":\\\"The invoice id\\\",\\\"type\\\":\\\"string\\\"},\\\"userId\\\":{\\\"description\\\":\\\"The user id\\\",\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"invoiceId\\\",\\\"userId\\\"],\\\"title\\\":\\\"Invoice Paid Event\\\",\\\"type\\\":\\\"object\\\"}}\")\n    .featureFlag(\"cool-new-feature\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.create(Svix::EventTypeIn.new({\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"feature_flag\": \"cool-new-feature\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().create(EventTypeIn {\n    name: \"user.signup\".to_string(),\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    feature_flag: Some(\"cool-new-feature\".to_string()),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.CreateAsync(new EventTypeIn{\n    name: \"user.signup\",\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: new {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type create '{\n    \"name\": \"user.signup\",\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"featureFlag\": \"cool-new-feature\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/event-type/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"user.signup\",\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"featureFlag\": \"cool-new-feature\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/schema/generate-example/": {
            "post": {
                "description": "Generates a fake example from the given JSONSchema",
                "operationId": "v1.event-type.generate-example",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeSchemaIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeExampleOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Generate Schema Example",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeExampleOut = await svix.eventType.generateExample({\n    schema: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeExampleOut = await svix.eventType.generateExample({\n    schema: {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_example_out = svix.event_type.generate_example(EventTypeSchemaIn(\n    schema={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}\n), None)"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_example_out = await svix.event_type.generate_example(EventTypeSchemaIn(\n    schema={\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}\n), None)"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeExampleOut, err := svixClient.EventType.GenerateExample(ctx, &EventTypeSchemaIn{\n    Schema: map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"},\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeExampleOut = svix.eventType.generateExample(EventTypeSchemaIn()\n    .schema(\"\"\"{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\"\"\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeExampleOut eventTypeExampleOut = svix.getEventType().generateExample(new EventTypeSchemaIn()\n    .schema(\"{\\\"description\\\":\\\"An invoice was paid by a user\\\",\\\"properties\\\":{\\\"invoiceId\\\":{\\\"description\\\":\\\"The invoice id\\\",\\\"type\\\":\\\"string\\\"},\\\"userId\\\":{\\\"description\\\":\\\"The user id\\\",\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"invoiceId\\\",\\\"userId\\\"],\\\"title\\\":\\\"Invoice Paid Event\\\",\\\"type\\\":\\\"object\\\"}\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_example_out = svix.event_type.generate_example(Svix::EventTypeSchemaIn.new({\n    \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_example_out = svix.event_type().generate_example(EventTypeSchemaIn {\n    schema: json!({\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}),\n}, None).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeExampleOut = await svix.EventType.GenerateExampleAsync(new EventTypeSchemaIn{\n    schema: new {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type generate-example '{\n    \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'POST' \\\n  'https://api.svix.com/api/v1/event-type/schema/generate-example/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"schema\": {\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}\n    }'"
                    }
                ]
            }
        },
        "/api/v1/event-type/{event_type_name}/": {
            "delete": {
                "description": "Archive an event type.\n\nEndpoints already configured to filter on an event type will continue to do so after archival.\nHowever, new messages can not be sent with it and endpoints can not filter on it.\nAn event type can be unarchived with the\n[create operation](#operation/create_event_type_api_v1_event_type__post).",
                "operationId": "v1.event-type.delete",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "in": "query",
                        "name": "expunge",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Delete Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.eventType.delete(\"event_type_name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.eventType.delete(\"event_type_name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.EventType.Delete(ctx, \"event_type_name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.eventType.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getEventType().delete(\"event_type_name\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.event_type.delete(\"event_type_name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.event_type().delete(\"event_type_name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.EventType.DeleteAsync(\"event_type_name\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type delete \"event_type_name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'DELETE' \\\n  'https://api.svix.com/api/v1/event-type/{event_type_name}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "get": {
                "description": "Get an event type.",
                "operationId": "v1.event-type.get",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.get(\"event_type_name\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Get(ctx, \"event_type_name\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.get(\"event_type_name\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().get(\"event_type_name\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.get(\"event_type_name\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().get(\"event_type_name\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.GetAsync(\"event_type_name\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type get \"event_type_name\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/event-type/{event_type_name}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            },
            "patch": {
                "description": "Partially update an event type.",
                "operationId": "patch_event_type",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Patch Event Type",
                "tags": [
                    "Event Type"
                ]
            },
            "put": {
                "description": "Update an event type.",
                "operationId": "v1.event-type.update",
                "parameters": [
                    {
                        "description": "The event type's name",
                        "in": "path",
                        "name": "event_type_name",
                        "required": true,
                        "schema": {
                            "description": "The event type's name",
                            "example": "user.signup",
                            "maxLength": 256,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventTypeUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventTypeOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Update Event Type",
                "tags": [
                    "Event Type"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n});"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const eventTypeOut = await svix.eventType.update(\"event_type_name\", {\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n});"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "event_type_out = svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\"\n))"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "event_type_out = await svix.event_type.update(\"event_type_name\", EventTypeUpdate(\n    description=\"A user has signed up\",\n    archived=False,\n    schemas={\"1\": {\"description\": \"An invoice was paid by a user\", \"properties\": {\"invoiceId\": {\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": {\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": [\"invoiceId\", \"userId\"], \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    feature_flag=\"cool-new-feature\"\n))"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "eventTypeOut, err := svixClient.EventType.Update(ctx, \"event_type_name\", &EventTypeUpdate{\n    Description: \"A user has signed up\",\n    Archived: false,\n    Schemas: map[interface{}]interface{}{\"1\": map[string]interface{}{\"description\": \"An invoice was paid by a user\", \"properties\": map[interface{}]interface{}{\"invoiceId\": map[string]interface{}{\"description\": \"The invoice id\", \"type\": \"string\"}, \"userId\": map[string]interface{}{\"description\": \"The user id\", \"type\": \"string\"}}, \"required\": []string{\"invoiceId\", \"userId\"}, \"title\": \"Invoice Paid Event\", \"type\": \"object\"}},\n    FeatureFlag: \"cool-new-feature\",\n})"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val eventTypeOut = svix.eventType.update(\"event_type_name\", EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(\"\"\"{\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}}\"\"\")\n    .featureFlag(\"cool-new-feature\")\n)"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "EventTypeOut eventTypeOut = svix.getEventType().update(\"event_type_name\", new EventTypeUpdate()\n    .description(\"A user has signed up\")\n    .archived(false)\n    .schemas(\"{\\\"1\\\":{\\\"description\\\":\\\"An invoice was paid by a user\\\",\\\"properties\\\":{\\\"invoiceId\\\":{\\\"description\\\":\\\"The invoice id\\\",\\\"type\\\":\\\"string\\\"},\\\"userId\\\":{\\\"description\\\":\\\"The user id\\\",\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"invoiceId\\\",\\\"userId\\\"],\\\"title\\\":\\\"Invoice Paid Event\\\",\\\"type\\\":\\\"object\\\"}}\")\n    .featureFlag(\"cool-new-feature\")\n)"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "event_type_out = svix.event_type.update(\"event_type_name\", Svix::EventTypeUpdate.new({\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"feature_flag\": \"cool-new-feature\"\n}))"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let event_type_out = svix.event_type().update(\"event_type_name\", EventTypeUpdate {\n    description: \"A user has signed up\".to_string(),\n    archived: Some(false),\n    schemas: Some(json!({\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}})),\n    feature_flag: Some(\"cool-new-feature\".to_string()),\n}).await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var eventTypeOut = await svix.EventType.UpdateAsync(\"event_type_name\", new EventTypeUpdate{\n    description: \"A user has signed up\",\n    archived: false,\n    schemas: new {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    featureFlag: \"cool-new-feature\"\n})"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix event-type update \"event_type_name\" '{\n    \"description\": \"A user has signed up\",\n    \"archived\": false,\n    \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n    \"featureFlag\": \"cool-new-feature\"\n}'"
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'PUT' \\\n  'https://api.svix.com/api/v1/event-type/{event_type_name}/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"description\": \"A user has signed up\",\n        \"archived\": false,\n        \"schemas\": {\"1\":{\"description\":\"An invoice was paid by a user\",\"properties\":{\"invoiceId\":{\"description\":\"The invoice id\",\"type\":\"string\"},\"userId\":{\"description\":\"The user id\",\"type\":\"string\"}},\"required\":[\"invoiceId\",\"userId\"],\"title\":\"Invoice Paid Event\",\"type\":\"object\"}},\n        \"featureFlag\": \"cool-new-feature\"\n    }'"
                    }
                ]
            }
        },
        "/api/v1/health/": {
            "get": {
                "description": "Verify the API server is up and running.",
                "operationId": "v1.health.get",
                "responses": {
                    "204": {
                        "description": "no content"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Health",
                "tags": [
                    "Health"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "await svix.health.get();"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "await svix.health.get();"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "svix.health.get()"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "await svix.health.get()"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "err := svixClient.Health.Get(ctx)"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "svix.health.get()"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "svix.getHealth().get()"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "svix.health.get()"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "svix.health().get().await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "await svix.Health.GetAsync()"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix health get "
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/health/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/msg/broadcast/": {
            "post": {
                "description": "Creates a background task to send the same message to each application in your organization",
                "operationId": "create_broadcast_message",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageBroadcastIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageBroadcastOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Create Broadcast Message",
                "tags": [
                    "Broadcast"
                ]
            }
        },
        "/api/v1/stats/app/{app_id}/attempt/": {
            "get": {
                "description": "Returns application-level statistics on message attempts",
                "operationId": "v1.stats.app-attempts",
                "parameters": [
                    {
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get App Attempt Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.appAttempts(\"app_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.appAttempts(\"app_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "attempt_statistics_response = svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "attempt_statistics_response = await svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "attemptStatisticsResponse, err := svixClient.Stats.AppAttempts(ctx, \"app_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val attemptStatisticsResponse = svix.stats.appAttempts(\"app_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AttemptStatisticsResponse attemptStatisticsResponse = svix.getStats().appAttempts(\"app_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "attempt_statistics_response = svix.stats.app_attempts(\"app_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let attempt_statistics_response = svix.stats().app_attempts(\"app_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var attemptStatisticsResponse = await svix.Stats.AppAttemptsAsync(\"app_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stats app-attempts \"app_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/stats/app/{app_id}/attempt/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt/": {
            "get": {
                "description": "Returns endpoint-level statistics on message attempts",
                "operationId": "v1.stats.endpoint-attempts",
                "parameters": [
                    {
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The app's ID or UID",
                        "in": "path",
                        "name": "app_id",
                        "required": true,
                        "schema": {
                            "description": "The app's ID or UID",
                            "example": "unique-app-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "The ep's ID or UID",
                        "in": "path",
                        "name": "endpoint_id",
                        "required": true,
                        "schema": {
                            "description": "The ep's ID or UID",
                            "example": "unique-ep-identifier",
                            "maxLength": 256,
                            "minLength": 1,
                            "pattern": "^[a-zA-Z0-9\\-_.]+$",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttemptStatisticsResponse"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Get Ep Stats",
                "tags": [
                    "Statistics"
                ],
                "x-codeSamples": [
                    {
                        "label": "JavaScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "TypeScript",
                        "lang": "JavaScript",
                        "source": "const attemptStatisticsResponse = await svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\");"
                    },
                    {
                        "label": "Python",
                        "lang": "Python",
                        "source": "attempt_statistics_response = svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Python (Async)",
                        "lang": "Python",
                        "source": "attempt_statistics_response = await svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Go",
                        "lang": "Go",
                        "source": "attemptStatisticsResponse, err := svixClient.Stats.EndpointAttempts(ctx, \"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Kotlin",
                        "lang": "Kotlin",
                        "source": "val attemptStatisticsResponse = svix.stats.endpointAttempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Java",
                        "lang": "Java",
                        "source": "AttemptStatisticsResponse attemptStatisticsResponse = svix.getStats().endpointAttempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Ruby",
                        "lang": "Ruby",
                        "source": "attempt_statistics_response = svix.stats.endpoint_attempts(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "Rust",
                        "lang": "Rust",
                        "source": "let attempt_statistics_response = svix.stats().endpoint_attempts(\"app_id\", \"endpoint_id\").await?;"
                    },
                    {
                        "label": "C#",
                        "lang": "C#",
                        "source": "var attemptStatisticsResponse = await svix.Stats.EndpointAttemptsAsync(\"app_id\", \"endpoint_id\")"
                    },
                    {
                        "label": "CLI",
                        "lang": "Shell",
                        "source": "svix stats endpoint-attempts \"app_id\" \"endpoint_id\""
                    },
                    {
                        "label": "cURL",
                        "lang": "Shell",
                        "source": "curl -X 'GET' \\\n  'https://api.svix.com/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt/' \\\n  -H 'Authorization: Bearer AUTH_TOKEN' \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json'"
                    }
                ]
            }
        },
        "/api/v1/stats/usage/app/": {
            "post": {
                "description": "Creates a background task to calculate the message destinations for all applications in the environment.",
                "operationId": "calculate_aggregate_app_stats",
                "parameters": [
                    {
                        "description": "The request's idempotency key",
                        "in": "header",
                        "name": "idempotency-key",
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppUsageStatsIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppUsageStatsOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        },
                        "description": "Validation Error"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ],
                "summary": "Calculate Aggregate App Stats",
                "tags": [
                    "Statistics"
                ]
            }
        }
    },
    "tags": [
        {
            "description": "Consumer Applications are where messages are sent to. In most cases you would want to have one application for each of your users.",
            "name": "Application"
        },
        {
            "description": "Messages are the webhook events being sent.",
            "name": "Message"
        },
        {
            "description": "Attempts to deliver `Message`s to `Endpoint`s.",
            "name": "Message Attempt"
        },
        {
            "description": "Endpoints are the URLs messages will be sent to. Each application can have multiple endpoints and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).",
            "name": "Endpoint"
        },
        {
            "description": "Integrations are services your users connect an application to. An integration can manage the application and its endpoints.",
            "name": "Integration"
        },
        {
            "description": "Event types are identifiers denoting the type of message being sent. Event types are primarily used to decide which events are sent to which endpoint.",
            "name": "Event Type"
        },
        {
            "description": "Easily give your users access to our pre-built management UI.",
            "name": "Authentication"
        },
        {
            "description": "Health checks for the API.",
            "name": "Health"
        },
        {
            "description": "The webhooks the Svix service sends to notify you of events.",
            "name": "Webhooks"
        },
        {
            "description": "The background tasks that have been executed for your environment.",
            "name": "Background Tasks"
        }
    ],
    "x-tagGroups": [
        {
            "name": "General",
            "tags": [
                "Application",
                "Event Type",
                "Background Tasks"
            ]
        },
        {
            "name": "Application specific",
            "tags": [
                "Authentication",
                "Endpoint",
                "Message",
                "Message Attempt",
                "Integration"
            ]
        },
        {
            "name": "Utility",
            "tags": [
                "Health"
            ]
        },
        {
            "name": "Webhooks",
            "tags": [
                "Webhooks"
            ]
        }
    ],
    "x-webhooks": {
        "EndpointCreatedEvent": {
            "post": {
                "description": "Sent when an endpoint is created.",
                "operationId": "EndpointCreatedEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointCreatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "EndpointCreatedEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "EndpointDeletedEvent": {
            "post": {
                "description": "Sent when an endpoint is deleted.",
                "operationId": "EndpointDeletedEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDeletedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "EndpointDeletedEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "EndpointDisabledEvent": {
            "post": {
                "description": "Sent when an endpoint has been automatically disabled after continuous failures.",
                "operationId": "EndpointDisabledEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointDisabledEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "EndpointDisabledEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "EndpointUpdatedEvent": {
            "post": {
                "description": "Sent when an endpoint is updated.",
                "operationId": "EndpointUpdatedEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointUpdatedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "EndpointUpdatedEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "MessageAttemptExhaustedEvent": {
            "post": {
                "description": "Sent when a message delivery has failed (all of the retry attempts have been exhausted).",
                "operationId": "MessageAttemptExhaustedEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptExhaustedEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "MessageAttemptExhaustedEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        },
        "MessageAttemptFailingEvent": {
            "post": {
                "description": "Sent after a message has been failing for a few times.\nIt's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.",
                "operationId": "MessageAttemptFailingEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageAttemptFailingEvent"
                            }
                        }
                    }
                },
                "responses": {
                    "2XX": {
                        "description": "Return any 2XX status to indicate that the data was received successfully"
                    }
                },
                "summary": "MessageAttemptFailingEvent",
                "tags": [
                    "Webhooks"
                ]
            }
        }
    }
}
